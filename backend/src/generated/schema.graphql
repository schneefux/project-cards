### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


scalar DateTime

type Mutation {
  signupUser(data: UserCreateInput!): User!
}

type Query {
  trumpPacks: [TrumpPack!]!
}

type TrumpAttribute {
  aimHigh: Boolean!
  id: ID!
  name: String!
}

input TrumpAttributeCreateManyWithoutAttributesInput {
  connect: [TrumpAttributeWhereUniqueInput!]
  create: [TrumpAttributeCreateWithoutTrumpPackInput!]
}

input TrumpAttributeCreateOneWithoutAttributeInput {
  connect: TrumpAttributeWhereUniqueInput
  create: TrumpAttributeCreateWithoutTrumpAttributeValuesInput
}

input TrumpAttributeCreateWithoutTrumpAttributeValuesInput {
  aimHigh: Boolean
  id: ID
  name: String!
  trumpPack: TrumpPackCreateOneWithoutTrumpPackInput
}

input TrumpAttributeCreateWithoutTrumpPackInput {
  aimHigh: Boolean
  id: ID
  name: String!
  trumpAttributeValues: TrumpAttributeValueCreateManyWithoutTrumpAttributeValuesInput
}

type TrumpAttributeValue {
  attribute: TrumpAttribute!
  id: ID!
  value: Float!
}

input TrumpAttributeValueCreateManyWithoutAttributeValuesInput {
  connect: [TrumpAttributeValueWhereUniqueInput!]
  create: [TrumpAttributeValueCreateWithoutTrumpCardInput!]
}

input TrumpAttributeValueCreateManyWithoutTrumpAttributeValuesInput {
  connect: [TrumpAttributeValueWhereUniqueInput!]
  create: [TrumpAttributeValueCreateWithoutAttributeInput!]
}

input TrumpAttributeValueCreateWithoutAttributeInput {
  id: ID
  trumpCard: TrumpCardCreateOneWithoutTrumpCardInput
  value: Float!
}

input TrumpAttributeValueCreateWithoutTrumpCardInput {
  attribute: TrumpAttributeCreateOneWithoutAttributeInput!
  id: ID
  value: Float!
}

input TrumpAttributeValueWhereUniqueInput {
  id: ID
}

input TrumpAttributeWhereUniqueInput {
  id: ID
}

type TrumpCard {
  attributeValues(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpAttributeValue!]!
  description: String
  id: ID!
  imageUrl: String
  name: String!
}

input TrumpCardCreateManyWithoutCardsInput {
  connect: [TrumpCardWhereUniqueInput!]
  create: [TrumpCardCreateWithoutTrumpPackInput!]
}

input TrumpCardCreateOneWithoutTrumpCardInput {
  connect: TrumpCardWhereUniqueInput
  create: TrumpCardCreateWithoutAttributeValuesInput
}

input TrumpCardCreateWithoutAttributeValuesInput {
  description: String
  id: ID
  imageUrl: String
  name: String!
  trumpPack: TrumpPackCreateOneWithoutTrumpPackInput
}

input TrumpCardCreateWithoutTrumpPackInput {
  attributeValues: TrumpAttributeValueCreateManyWithoutAttributeValuesInput
  description: String
  id: ID
  imageUrl: String
  name: String!
}

input TrumpCardWhereUniqueInput {
  id: ID
}

type TrumpGame {
  id: ID!
  pack: TrumpPack!
  userAtTurn: TrumpPlayer!
  users(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpPlayer!]!
}

input TrumpGameCreateManyWithoutTrumpGamesAtTurnInput {
  connect: [TrumpGameWhereUniqueInput!]
  create: [TrumpGameCreateWithoutUserAtTurnInput!]
}

input TrumpGameCreateManyWithoutTrumpGamesInput {
  connect: [TrumpGameWhereUniqueInput!]
  create: [TrumpGameCreateWithoutPackInput!]
}

input TrumpGameCreateWithoutPackInput {
  id: ID
  userAtTurn: TrumpPlayerCreateOneWithoutUserAtTurnInput!
  users: TrumpPlayerCreateManyWithoutUsersInput
}

input TrumpGameCreateWithoutUserAtTurnInput {
  id: ID
  pack: TrumpPackCreateOneWithoutPackInput!
  users: TrumpPlayerCreateManyWithoutUsersInput
}

input TrumpGameWhereUniqueInput {
  id: ID
}

type TrumpPack {
  attributes(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpAttribute!]!
  cards(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpCard!]!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input TrumpPackCreateManyWithoutTrumpPacksInput {
  connect: [TrumpPackWhereUniqueInput!]
  create: [TrumpPackCreateWithoutTrumpPlayerInput!]
}

input TrumpPackCreateOneWithoutPackInput {
  connect: TrumpPackWhereUniqueInput
  create: TrumpPackCreateWithoutTrumpGamesInput
}

input TrumpPackCreateOneWithoutTrumpPackInput {
  connect: TrumpPackWhereUniqueInput
  create: TrumpPackCreateWithoutAttributesInput
}

input TrumpPackCreateWithoutAttributesInput {
  cards: TrumpCardCreateManyWithoutCardsInput
  createdAt: DateTime
  id: ID
  name: String!
  trumpGames: TrumpGameCreateManyWithoutTrumpGamesInput
  trumpPlayer: TrumpPlayerCreateOneWithoutTrumpPlayerInput
  updatedAt: DateTime
}

input TrumpPackCreateWithoutTrumpGamesInput {
  attributes: TrumpAttributeCreateManyWithoutAttributesInput
  cards: TrumpCardCreateManyWithoutCardsInput
  createdAt: DateTime
  id: ID
  name: String!
  trumpPlayer: TrumpPlayerCreateOneWithoutTrumpPlayerInput
  updatedAt: DateTime
}

input TrumpPackCreateWithoutTrumpPlayerInput {
  attributes: TrumpAttributeCreateManyWithoutAttributesInput
  cards: TrumpCardCreateManyWithoutCardsInput
  createdAt: DateTime
  id: ID
  name: String!
  trumpGames: TrumpGameCreateManyWithoutTrumpGamesInput
  updatedAt: DateTime
}

input TrumpPackWhereUniqueInput {
  id: ID
  name: String
}

type TrumpPlayer {
  id: ID!
  trumpGames(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpGame!]!
  trumpGamesAtTurn(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpGame!]!
  trumpPacks(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpPack!]!
  user: User!
}

input TrumpPlayerCreateManyWithoutUsersInput {
  connect: [TrumpPlayerWhereUniqueInput!]
  create: [TrumpPlayerCreateWithoutTrumpGamesInput!]
}

input TrumpPlayerCreateOneWithoutTrumpPlayerInput {
  connect: TrumpPlayerWhereUniqueInput
  create: TrumpPlayerCreateWithoutUserInput
}

input TrumpPlayerCreateOneWithoutUserAtTurnInput {
  connect: TrumpPlayerWhereUniqueInput
  create: TrumpPlayerCreateWithoutTrumpGamesAtTurnInput
}

input TrumpPlayerCreateWithoutTrumpGamesAtTurnInput {
  id: ID
  trumpGames: TrumpGameCreateManyWithoutTrumpGamesInput
  trumpPacks: TrumpPackCreateManyWithoutTrumpPacksInput
  user: UserCreateOneWithoutUserInput!
}

input TrumpPlayerCreateWithoutTrumpGamesInput {
  id: ID
  trumpGamesAtTurn: TrumpGameCreateManyWithoutTrumpGamesAtTurnInput
  trumpPacks: TrumpPackCreateManyWithoutTrumpPacksInput
  user: UserCreateOneWithoutUserInput!
}

input TrumpPlayerCreateWithoutUserInput {
  id: ID
  trumpGames: TrumpGameCreateManyWithoutTrumpGamesInput
  trumpGamesAtTurn: TrumpGameCreateManyWithoutTrumpGamesAtTurnInput
  trumpPacks: TrumpPackCreateManyWithoutTrumpPacksInput
}

input TrumpPlayerWhereUniqueInput {
  id: ID
}

type User {
  email: String!
  id: ID!
  name: String!
  trumpPlayer: TrumpPlayer!
}

input UserCreateInput {
  email: String!
  id: ID
  name: String!
  trumpPlayer: TrumpPlayerCreateOneWithoutTrumpPlayerInput!
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTrumpPlayerInput
}

input UserCreateWithoutTrumpPlayerInput {
  email: String!
  id: ID
  name: String!
}

input UserWhereUniqueInput {
  id: ID
}
