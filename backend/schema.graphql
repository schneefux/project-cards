### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


scalar DateTime

type Game {
  hands(after: ID, before: ID, first: Int, last: Int, skip: Int): [GameHand!]!
  id: ID!
  pack: TrumpPack!
  piles(after: ID, before: ID, first: Int, last: Int, skip: Int): [GamePile!]!
}

input GameCreateManyWithoutGamesInput {
  connect: [GameWhereUniqueInput!]
  create: [GameCreateWithoutPackInput!]
}

input GameCreateOneWithoutGameInput {
  connect: GameWhereUniqueInput
  create: GameCreateWithoutHandsInput
}

input GameCreateWithoutHandsInput {
  id: ID
  pack: TrumpPackCreateOneWithoutPackInput!
  piles: GamePileCreateManyWithoutPilesInput
}

input GameCreateWithoutPackInput {
  hands: GameHandCreateManyWithoutHandsInput
  id: ID
  piles: GamePileCreateManyWithoutPilesInput
}

type GameHand {
  atTurn: Boolean!
  game: Game!
  id: ID!
  piles(after: ID, before: ID, first: Int, last: Int, skip: Int): [GameHandPile!]!
  player: User!
  score: Int!
}

input GameHandCreateManyWithoutGameHandsInput {
  connect: [GameHandWhereUniqueInput!]
  create: [GameHandCreateWithoutPlayerInput!]
}

input GameHandCreateManyWithoutHandsInput {
  connect: [GameHandWhereUniqueInput!]
  create: [GameHandCreateWithoutGameInput!]
}

input GameHandCreateOneWithoutHandInput {
  connect: GameHandWhereUniqueInput
  create: GameHandCreateWithoutPilesInput
}

input GameHandCreateWithoutGameInput {
  atTurn: Boolean!
  id: ID
  piles: GameHandPileCreateManyWithoutPilesInput
  player: UserCreateOneWithoutPlayerInput!
  score: Int!
}

input GameHandCreateWithoutPilesInput {
  atTurn: Boolean!
  game: GameCreateOneWithoutGameInput!
  id: ID
  player: UserCreateOneWithoutPlayerInput!
  score: Int!
}

input GameHandCreateWithoutPlayerInput {
  atTurn: Boolean!
  game: GameCreateOneWithoutGameInput!
  id: ID
  piles: GameHandPileCreateManyWithoutPilesInput
  score: Int!
}

type GameHandPile {
  hand: GameHand!
  id: ID!
  name: String!
  pileCards(after: ID, before: ID, first: Int, last: Int, skip: Int): [GamePileCard!]!
}

input GameHandPileCreateManyWithoutHandPilesInput {
  connect: [GameHandPileWhereUniqueInput!]
  create: [GameHandPileCreateWithoutPileCardsInput!]
}

input GameHandPileCreateManyWithoutPilesInput {
  connect: [GameHandPileWhereUniqueInput!]
  create: [GameHandPileCreateWithoutHandInput!]
}

input GameHandPileCreateWithoutHandInput {
  id: ID
  name: String!
  pileCards: GamePileCardCreateManyWithoutPileCardsInput
}

input GameHandPileCreateWithoutPileCardsInput {
  hand: GameHandCreateOneWithoutHandInput!
  id: ID
  name: String!
}

input GameHandPileWhereUniqueInput {
  id: ID
}

input GameHandWhereUniqueInput {
  id: ID
}

type GamePile {
  game: Game!
  id: ID!
  name: String!
  pileCards(after: ID, before: ID, first: Int, last: Int, skip: Int): [GamePileCard!]!
}

type GamePileCard {
  card: TrumpCard!
  id: ID!
  index: Int
}

input GamePileCardCreateManyWithoutPileCardsInput {
  connect: [GamePileCardWhereUniqueInput!]
  create: [GamePileCardCreateWithoutPilesInput!]
}

input GamePileCardCreateWithoutPilesInput {
  card: TrumpCardCreateOneWithoutCardInput!
  handPiles: GameHandPileCreateManyWithoutHandPilesInput
  id: ID
  index: Int
}

input GamePileCardWhereUniqueInput {
  id: ID
}

input GamePileCreateManyWithoutPilesInput {
  connect: [GamePileWhereUniqueInput!]
  create: [GamePileCreateWithoutGameInput!]
}

input GamePileCreateWithoutGameInput {
  id: ID
  name: String!
  pileCards: GamePileCardCreateManyWithoutPileCardsInput
}

input GamePileWhereUniqueInput {
  id: ID
}

input GameWhereUniqueInput {
  id: ID
}

type LoginResponse {
  token: String!
  user: User!
}

type Mutation {
  bidGoofenspiel(gameId: ID!, pileCardId: ID!): Boolean!
  createGoofenspiel(pack: ID!): ID!
  createOneTrumpAttribute(data: TrumpAttributeCreateInput!): TrumpAttribute!
  createOneTrumpCard(data: TrumpCardCreateInput!): TrumpCard!
  createOneTrumpPack(data: TrumpPackCreateInput!): TrumpPack!
  joinGoofenspiel(gameId: ID!): Boolean!
  login(email: String!, password: String!): LoginResponse
  register(email: String!, name: String!, password: String!): LoginResponse
  uploadTrumpCardImage(cardId: ID!, file: Upload): Boolean!
}

type Query {
  game(where: GameWhereUniqueInput!): Game
  games(after: ID, before: ID, first: Int, last: Int, skip: Int): [Game!]!
  me: User
  trumpPack(where: TrumpPackWhereUniqueInput!): TrumpPack
  trumpPacks(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpPack!]!
  user(where: UserWhereUniqueInput!): User
  users(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!
}

type Subscription {
  createdGame: Game!
  updatedGame(id: ID!): Game!
}

type TrumpAttribute {
  aimHigh: Boolean!
  id: ID!
  name: String!
  pack: TrumpPack!
}

input TrumpAttributeCreateInput {
  aimHigh: Boolean
  id: ID
  name: String!
  pack: TrumpPackCreateOneWithoutPackInput!
  trumpAttributeValues: TrumpAttributeValueCreateManyWithoutTrumpAttributeValuesInput
}

input TrumpAttributeCreateManyWithoutAttributesInput {
  connect: [TrumpAttributeWhereUniqueInput!]
  create: [TrumpAttributeCreateWithoutPackInput!]
}

input TrumpAttributeCreateOneWithoutAttributeInput {
  connect: TrumpAttributeWhereUniqueInput
  create: TrumpAttributeCreateWithoutTrumpAttributeValuesInput
}

input TrumpAttributeCreateWithoutPackInput {
  aimHigh: Boolean
  id: ID
  name: String!
  trumpAttributeValues: TrumpAttributeValueCreateManyWithoutTrumpAttributeValuesInput
}

input TrumpAttributeCreateWithoutTrumpAttributeValuesInput {
  aimHigh: Boolean
  id: ID
  name: String!
  pack: TrumpPackCreateOneWithoutPackInput!
}

type TrumpAttributeValue {
  attribute: TrumpAttribute!
  card: TrumpCard!
  id: ID!
  value: Float!
}

input TrumpAttributeValueCreateManyWithoutAttributeValuesInput {
  connect: [TrumpAttributeValueWhereUniqueInput!]
  create: [TrumpAttributeValueCreateWithoutCardInput!]
}

input TrumpAttributeValueCreateManyWithoutTrumpAttributeValuesInput {
  connect: [TrumpAttributeValueWhereUniqueInput!]
  create: [TrumpAttributeValueCreateWithoutAttributeInput!]
}

input TrumpAttributeValueCreateWithoutAttributeInput {
  card: TrumpCardCreateOneWithoutCardInput!
  id: ID
  value: Float!
}

input TrumpAttributeValueCreateWithoutCardInput {
  attribute: TrumpAttributeCreateOneWithoutAttributeInput!
  id: ID
  value: Float!
}

input TrumpAttributeValueWhereUniqueInput {
  id: ID
}

input TrumpAttributeWhereUniqueInput {
  id: ID
}

type TrumpCard {
  attributeValues(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpAttributeValue!]!
  description: String
  id: ID!
  imageUrl: String
  name: String!
  pack: TrumpPack!
}

input TrumpCardCreateInput {
  attributeValues: TrumpAttributeValueCreateManyWithoutAttributeValuesInput
  description: String
  id: ID
  imageUrl: String
  name: String!
  pack: TrumpPackCreateOneWithoutPackInput!
  pileCards: GamePileCardCreateManyWithoutPileCardsInput
}

input TrumpCardCreateManyWithoutCardsInput {
  connect: [TrumpCardWhereUniqueInput!]
  create: [TrumpCardCreateWithoutPackInput!]
}

input TrumpCardCreateOneWithoutCardInput {
  connect: TrumpCardWhereUniqueInput
  create: TrumpCardCreateWithoutPileCardsInput
}

input TrumpCardCreateWithoutPackInput {
  attributeValues: TrumpAttributeValueCreateManyWithoutAttributeValuesInput
  description: String
  id: ID
  imageUrl: String
  name: String!
  pileCards: GamePileCardCreateManyWithoutPileCardsInput
}

input TrumpCardCreateWithoutPileCardsInput {
  attributeValues: TrumpAttributeValueCreateManyWithoutAttributeValuesInput
  description: String
  id: ID
  imageUrl: String
  name: String!
  pack: TrumpPackCreateOneWithoutPackInput!
}

input TrumpCardWhereUniqueInput {
  id: ID
}

type TrumpPack {
  attributes(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpAttribute!]!
  author: User!
  cards(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpCard!]!
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input TrumpPackCreateInput {
  attributes: TrumpAttributeCreateManyWithoutAttributesInput
  author: UserCreateOneWithoutAuthorInput!
  cards: TrumpCardCreateManyWithoutCardsInput
  createdAt: DateTime
  description: String!
  games: GameCreateManyWithoutGamesInput
  id: ID
  name: String!
  updatedAt: DateTime
}

input TrumpPackCreateManyWithoutTrumpPacksInput {
  connect: [TrumpPackWhereUniqueInput!]
  create: [TrumpPackCreateWithoutAuthorInput!]
}

input TrumpPackCreateOneWithoutPackInput {
  connect: TrumpPackWhereUniqueInput
  create: TrumpPackCreateWithoutAttributesInput
}

input TrumpPackCreateWithoutAttributesInput {
  author: UserCreateOneWithoutAuthorInput!
  cards: TrumpCardCreateManyWithoutCardsInput
  createdAt: DateTime
  description: String!
  games: GameCreateManyWithoutGamesInput
  id: ID
  name: String!
  updatedAt: DateTime
}

input TrumpPackCreateWithoutAuthorInput {
  attributes: TrumpAttributeCreateManyWithoutAttributesInput
  cards: TrumpCardCreateManyWithoutCardsInput
  createdAt: DateTime
  description: String!
  games: GameCreateManyWithoutGamesInput
  id: ID
  name: String!
  updatedAt: DateTime
}

input TrumpPackWhereUniqueInput {
  id: ID
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  email: String!
  gameHands(after: ID, before: ID, first: Int, last: Int, skip: Int): [GameHand!]!
  id: ID!
  name: String!
  trumpPacks(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpPack!]!
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTrumpPacksInput
}

input UserCreateOneWithoutPlayerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutGameHandsInput
}

input UserCreateWithoutGameHandsInput {
  email: String!
  id: ID
  name: String!
  password: String!
  trumpPacks: TrumpPackCreateManyWithoutTrumpPacksInput
}

input UserCreateWithoutTrumpPacksInput {
  email: String!
  gameHands: GameHandCreateManyWithoutGameHandsInput
  id: ID
  name: String!
  password: String!
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
