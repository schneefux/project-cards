### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


scalar DateTime

type Mutation {
  createOneTrumpAttribute(data: TrumpAttributeCreateInput!): TrumpAttribute!
  createOneTrumpCard(data: TrumpCardCreateInput!): TrumpCard!
  createOneTrumpPack(data: TrumpPackCreateInput!): TrumpPack!
  createOneUser(data: UserCreateInput!): User!
  startTrumpGame(pack: String!, player1: String!, player2: String!): TrumpGame!
  uploadTrumpCardImage(cardId: ID!, file: Upload): Boolean!
}

type Query {
  trumpGames(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpGame!]!
  trumpPacks(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpPack!]!
  user(where: UserWhereUniqueInput!): User
}

type Subscription {
  createdTrumpGame: TrumpGame!
}

type TrumpAttribute {
  aimHigh: Boolean!
  id: ID!
  name: String!
  pack: TrumpPack!
}

input TrumpAttributeCreateInput {
  aimHigh: Boolean
  id: ID
  name: String!
  pack: TrumpPackCreateOneWithoutPackInput!
  trumpAttributeValues: TrumpAttributeValueCreateManyWithoutTrumpAttributeValuesInput
}

input TrumpAttributeCreateManyWithoutAttributesInput {
  connect: [TrumpAttributeWhereUniqueInput!]
  create: [TrumpAttributeCreateWithoutPackInput!]
}

input TrumpAttributeCreateOneWithoutAttributeInput {
  connect: TrumpAttributeWhereUniqueInput
  create: TrumpAttributeCreateWithoutTrumpAttributeValuesInput
}

input TrumpAttributeCreateWithoutPackInput {
  aimHigh: Boolean
  id: ID
  name: String!
  trumpAttributeValues: TrumpAttributeValueCreateManyWithoutTrumpAttributeValuesInput
}

input TrumpAttributeCreateWithoutTrumpAttributeValuesInput {
  aimHigh: Boolean
  id: ID
  name: String!
  pack: TrumpPackCreateOneWithoutPackInput!
}

type TrumpAttributeValue {
  attribute: TrumpAttribute!
  card: TrumpCard!
  id: ID!
  value: Float!
}

input TrumpAttributeValueCreateManyWithoutAttributeValuesInput {
  connect: [TrumpAttributeValueWhereUniqueInput!]
  create: [TrumpAttributeValueCreateWithoutCardInput!]
}

input TrumpAttributeValueCreateManyWithoutTrumpAttributeValuesInput {
  connect: [TrumpAttributeValueWhereUniqueInput!]
  create: [TrumpAttributeValueCreateWithoutAttributeInput!]
}

input TrumpAttributeValueCreateWithoutAttributeInput {
  card: TrumpCardCreateOneWithoutCardInput!
  id: ID
  value: Float!
}

input TrumpAttributeValueCreateWithoutCardInput {
  attribute: TrumpAttributeCreateOneWithoutAttributeInput!
  id: ID
  value: Float!
}

input TrumpAttributeValueWhereUniqueInput {
  id: ID
}

input TrumpAttributeWhereUniqueInput {
  id: ID
}

type TrumpCard {
  attributeValues(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpAttributeValue!]!
  description: String
  id: ID!
  imageUrl: String
  name: String!
  pack: TrumpPack!
}

input TrumpCardCreateInput {
  attributeValues: TrumpAttributeValueCreateManyWithoutAttributeValuesInput
  description: String
  id: ID
  imageUrl: String
  name: String!
  pack: TrumpPackCreateOneWithoutPackInput!
}

input TrumpCardCreateManyWithoutCardsInput {
  connect: [TrumpCardWhereUniqueInput!]
  create: [TrumpCardCreateWithoutPackInput!]
}

input TrumpCardCreateOneWithoutCardInput {
  connect: TrumpCardWhereUniqueInput
  create: TrumpCardCreateWithoutAttributeValuesInput
}

input TrumpCardCreateWithoutAttributeValuesInput {
  description: String
  id: ID
  imageUrl: String
  name: String!
  pack: TrumpPackCreateOneWithoutPackInput!
}

input TrumpCardCreateWithoutPackInput {
  attributeValues: TrumpAttributeValueCreateManyWithoutAttributeValuesInput
  description: String
  id: ID
  imageUrl: String
  name: String!
}

input TrumpCardWhereUniqueInput {
  id: ID
}

type TrumpGame {
  id: ID!
  pack: TrumpPack!
  playerAtTurn: User
  players(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!
}

input TrumpGameCreateManyWithoutTrumpGamesAtTurnInput {
  connect: [TrumpGameWhereUniqueInput!]
  create: [TrumpGameCreateWithoutPlayerAtTurnInput!]
}

input TrumpGameCreateManyWithoutTrumpGamesInput {
  connect: [TrumpGameWhereUniqueInput!]
  create: [TrumpGameCreateWithoutPlayersInput!]
}

input TrumpGameCreateWithoutPlayerAtTurnInput {
  id: ID
  pack: TrumpPackCreateOneWithoutPackInput!
  players: UserCreateManyWithoutPlayersInput
}

input TrumpGameCreateWithoutPlayersInput {
  id: ID
  pack: TrumpPackCreateOneWithoutPackInput!
  playerAtTurn: UserCreateOneWithoutPlayerAtTurnInput
}

input TrumpGameWhereUniqueInput {
  id: ID
}

type TrumpPack {
  attributes(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpAttribute!]!
  author: User!
  cards(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpCard!]!
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input TrumpPackCreateInput {
  attributes: TrumpAttributeCreateManyWithoutAttributesInput
  author: UserCreateOneWithoutAuthorInput!
  cards: TrumpCardCreateManyWithoutCardsInput
  createdAt: DateTime
  description: String!
  id: ID
  name: String!
  trumpGames: TrumpGameCreateManyWithoutTrumpGamesInput
  updatedAt: DateTime
}

input TrumpPackCreateManyWithoutTrumpPacksInput {
  connect: [TrumpPackWhereUniqueInput!]
  create: [TrumpPackCreateWithoutAuthorInput!]
}

input TrumpPackCreateOneWithoutPackInput {
  connect: TrumpPackWhereUniqueInput
  create: TrumpPackCreateWithoutAttributesInput
}

input TrumpPackCreateWithoutAttributesInput {
  author: UserCreateOneWithoutAuthorInput!
  cards: TrumpCardCreateManyWithoutCardsInput
  createdAt: DateTime
  description: String!
  id: ID
  name: String!
  trumpGames: TrumpGameCreateManyWithoutTrumpGamesInput
  updatedAt: DateTime
}

input TrumpPackCreateWithoutAuthorInput {
  attributes: TrumpAttributeCreateManyWithoutAttributesInput
  cards: TrumpCardCreateManyWithoutCardsInput
  createdAt: DateTime
  description: String!
  id: ID
  name: String!
  trumpGames: TrumpGameCreateManyWithoutTrumpGamesInput
  updatedAt: DateTime
}

input TrumpPackWhereUniqueInput {
  id: ID
  name: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  email: String!
  id: ID!
  name: String!
  trumpGames(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpGame!]!
  trumpGamesAtTurn(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpGame!]!
  trumpPacks(after: ID, before: ID, first: Int, last: Int, skip: Int): [TrumpPack!]!
}

input UserCreateInput {
  email: String!
  id: ID
  name: String!
  trumpGames: TrumpGameCreateManyWithoutTrumpGamesInput
  trumpGamesAtTurn: TrumpGameCreateManyWithoutTrumpGamesAtTurnInput
  trumpPacks: TrumpPackCreateManyWithoutTrumpPacksInput
}

input UserCreateManyWithoutPlayersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTrumpGamesInput!]
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTrumpPacksInput
}

input UserCreateOneWithoutPlayerAtTurnInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTrumpGamesAtTurnInput
}

input UserCreateWithoutTrumpGamesAtTurnInput {
  email: String!
  id: ID
  name: String!
  trumpGames: TrumpGameCreateManyWithoutTrumpGamesInput
  trumpPacks: TrumpPackCreateManyWithoutTrumpPacksInput
}

input UserCreateWithoutTrumpGamesInput {
  email: String!
  id: ID
  name: String!
  trumpGamesAtTurn: TrumpGameCreateManyWithoutTrumpGamesAtTurnInput
  trumpPacks: TrumpPackCreateManyWithoutTrumpPacksInput
}

input UserCreateWithoutTrumpPacksInput {
  email: String!
  id: ID
  name: String!
  trumpGames: TrumpGameCreateManyWithoutTrumpGamesInput
  trumpGamesAtTurn: TrumpGameCreateManyWithoutTrumpGamesAtTurnInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
